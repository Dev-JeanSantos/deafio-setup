package com.example.desafiosetup.adapter.output.dynamodb.entidade

import com.amazonaws.services.dynamodbv2.datamodeling.*
import com.example.desafiosetup.aplicacao.dominio.constante.Status
import com.example.desafiosetup.aplicacao.dominio.modelo.Transferencia
import java.math.BigDecimal
import java.util.*

@DynamoDBTable(tableName = "ContaCorrente")
data class TransferenciaModel (
    @DynamoDBHashKey(attributeName = "pk")
    var pk: String = "TRANSFERENCIA_${UUID.randomUUID()}",
    @DynamoDBRangeKey(attributeName = "sk")
    @DynamoDBAutoGeneratedTimestamp(strategy = DynamoDBAutoGenerateStrategy.CREATE)
    var sk: String? = null,
    @DynamoDBAttribute(attributeName = "conta_remetente")
    var contaRemetente: String = "",
    @DynamoDBAttribute(attributeName = "conta_destino")
    var contaDestino: String = "",
    @DynamoDBTypeConvertedEnum()
    var status: Status = Status.PENDENTE,
    @DynamoDBAttribute(attributeName = "valor")
    var valor: BigDecimal =  BigDecimal.ZERO,
    @DynamoDBAttribute(attributeName = "caminho_s3")
    var caminhoS3: String = ""
){
    fun toTransferencia() = Transferencia(
            valor = this.valor,
            contaDebito = this.contaRemetente,
            contaCredito = this.contaDestino,
            transferenciaId = this.pk
    )
}

