package com.example.desafiosetup.adapter.output.dynamodb.entidade

import com.amazonaws.services.dynamodbv2.datamodeling.*
import com.example.desafiosetup.adapter.web.v1.response.ContaResponse
import com.example.desafiosetup.adapter.web.v1.response.CorrentistaResponse
import com.example.desafiosetup.adapter.web.v1.response.TransferenciaResponse
import com.example.desafiosetup.aplicacao.dominio.modelo.Conta
import com.example.desafiosetup.aplicacao.dominio.modelo.Correntista
import com.example.desafiosetup.aplicacao.dominio.constante.Status
import java.math.BigDecimal

@DynamoDBTable(tableName = "ContaCorrente")
data class CorrentistaModel(
    @DynamoDBHashKey(attributeName = "pk")
    var pk: String = "",
    @DynamoDBRangeKey(attributeName = "sk")
    @DynamoDBAutoGeneratedTimestamp(strategy = DynamoDBAutoGenerateStrategy.CREATE)
    var sk: String? = null,
    @DynamoDBAttribute(attributeName = "nome")
    var nome: String = "",
    @DynamoDBAttribute(attributeName = "conta")
    var conta: ContaModel = ContaModel(BigDecimal.ZERO)
) {
    fun toResponse(): CorrentistaResponse {
        return CorrentistaResponse(
                this.nome,
                excluirPrefixo(this.conta.numero, "CONTA_"),
                excluirPrefixo(this.pk, "CORRENTISTA_"),
                this.conta.saldo
        )
    }

    fun toTransferenciaResponse(): TransferenciaResponse {
        return TransferenciaResponse(
                this.nome,
                excluirPrefixo(this.conta.numero, "CONTA_"),
                excluirPrefixo(this.pk, "CORRENTISTA_"),
                this.conta.saldo
        )
    }
    fun toContaResponse(): ContaResponse {
        return ContaResponse(
                this.nome,
                excluirPrefixo(this.conta.numero, "CONTA_"),
                excluirPrefixo(this.pk, "CORRENTISTA_"),
        )
    }

    fun toConta() = Conta(
            numeroConta = conta.numero,
            saldo = conta.saldo,
            correntista = nome
    )

    fun toModel() = Correntista(
            nome = this.nome,
            idCorrentista = this.conta.numero,
            conta = this.conta.toDomain()
    )

    fun update(contaConfirmadaTransferencia: CorrentistaModel): CorrentistaModel {

        this.apply {
            this.nome = contaConfirmadaTransferencia.nome
            this.conta.saldo = contaConfirmadaTransferencia.conta.saldo
            this.conta.numero = contaConfirmadaTransferencia.conta.numero
            this.pk = pk
        }
        return contaConfirmadaTransferencia
    }

    private fun excluirPrefixo(key: String, prefixo: String) =
        if(key.startsWith(prefixo)) key.substring(prefixo.length) else key
}