package com.example.desafiosetup.adapter.output.dynamodb.entidade

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGenerateStrategy
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedTimestamp
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable
import com.example.desafiosetup.adapter.web.v1.response.CorrentistaResponse
import com.example.desafiosetup.aplicacao.dominio.modelo.Correntista
import java.math.BigDecimal

@DynamoDBTable(tableName = "ContaCorrente")
data class CorrentistaModel(
    @DynamoDBHashKey(attributeName = "pk")
    var pk: String = "",
    @DynamoDBRangeKey(attributeName = "sk")
    @DynamoDBAutoGeneratedTimestamp(strategy = DynamoDBAutoGenerateStrategy.CREATE)
    var sk: String? = null,
    @DynamoDBAttribute(attributeName = "nome")
    var nome: String = "",
    @DynamoDBAttribute(attributeName = "conta")
    var conta: ContaModel = ContaModel(BigDecimal.ZERO)
) {
    fun toCorrentista() = Correntista(
            nome = nome,
            conta = conta.toDomain()
    )
    fun toResponse():CorrentistaResponse{
        return CorrentistaResponse(this.nome, this.pk, this.pk, this.conta.saldo)
    }
}